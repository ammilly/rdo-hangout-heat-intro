heat_template_version: 2013-05-23
description: >
  This template deploys a MySQL database server and a web server running
  Wordpress.
  
  This is "example 2" from the RDO "Introduction to Heat"
  hangout.  The hangout is available online at:

  https://plus.google.com/events/c9u4sjn7ksb8jrmma7vd25aok94

parameters:

  server_image:
    type: string
    default: fedora-20-x86_64-updated
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  mysql_root_password:
    type: string
    description: root password for mysql instance
    default: secret

  dns_nameserver:
    type: string
    description: address of a dns nameserver reachable in your environment
    default: 8.8.8.8

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  db_name:
    type: string
    default: wordpress
    description: this is the name of the database to be used for wordpress.

  db_user:
    type: string
    default: wordpress
    description: username for authenticating to the database.

resources:

  wp_auth_key:
    type: OS::Heat::RandomString

  db_password:
    type: OS::Heat::RandomString

  ######################################################################
  #
  # network resources.  allocate a network and router for our server.
  # it would also be possible to take advantage of existing network
  # resources (and have the deployer provide network and subnet ids,
  # etc, as parameters), but I wanted to minmize the amount of
  # configuration necessary to make this go.
  fixed_network:
    type: "OS::Neutron::Net"

  # This is the subnet on which we will deploy our server.
  fixed_subnet:
    type: "OS::Neutron::Subnet"
    properties:
      cidr: 10.0.0.0/24
      network_id:
        get_resource: fixed_network
      dns_nameservers:
        - get_param: dns_nameserver

  # create a router attached to the external network provided as a
  # parameter to this stack.
  extrouter:
    type: "OS::Neutron::Router"
    properties:
      external_gateway_info:
        network:
          get_param: external_network_id

  # attached fixed_subnet to our extrouter router.
  extrouter_inside:
    type: "OS::Neutron::RouterInterface"
    properties:
      router_id:
        get_resource: extrouter
      subnet_id:
        get_resource:
          fixed_subnet

  ######################################################################
  #
  # security groups.  we need to permit network traffic of various
  # sorts.
  #

  # this permits ssh and icmp traffic
  secgroup_common:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - protocol: icmp
        - port_range_min: 22
          port_range_max: 22
          protocol: tcp

  # this permits mysql traffic
  secgroup_db:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - port_range_min: 3306
          port_range_max: 3306
          protocol: tcp

  # this permits http/https traffic
  secgroup_webserver:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - port_range_min: 80
          port_range_max: 80
          protocol: tcp
        - port_range_min: 443
          port_range_max: 443
          protocol: tcp
        - port_range_min: 8080
          port_range_max: 8080
          protocol: tcp

  ######################################################################
  #
  # Create a wait condition.  We will use this to synchronize the
  # creation of the Wordpress server with the database server (to
  # ensure that we don't attempt to access the database before it
  # is actually up and running).
  #
  mysql_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"

  mysql_wait_condition:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on:
      - mysql_server
    properties:
      Handle:
        get_resource: mysql_wait_handle
      Timeout: "6000"

  ######################################################################
  #
  # databases server.  this sets up a MySQL server
  #
  mysql_server:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh

            yum -y upgrade
            yum -y install mariadb-server

            systemctl enable mariadb
            systemctl start mariadb

            cat > /root/init_db.sql <<END_SQL
            DELETE FROM mysql.user;
            CREATE USER 'root'@'%' IDENTIFIED BY '$MYSQL_ROOT_PASSWORD';
            GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
            DROP DATABASE IF EXISTS test;

            CREATE DATABASE $DB_NAME;
            GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%'
              IDENTIFIED BY '$DB_PASSWORD';
            FLUSH PRIVILEGES;
            EXIT
            END_SQL

            mysql -uroot \
              --connect-timeout 30 < /root/init_db.sql

            # Signal heat that we are finished settings things up.
            cfn-signal -e0 --data 'OK' -r 'Setup complete' '$WAIT_HANDLE'
          params:
            # Here we use 'get_resource' to get the URL for notifying the
            # wait condition.
            "$WAIT_HANDLE":
              get_resource: mysql_wait_handle
            "$MYSQL_ROOT_PASSWORD":
              get_param: mysql_root_password
            "$DB_NAME":
              get_param: db_name
            "$DB_USER":
              get_param: db_user
            "$DB_PASSWORD":
              get_attr:
                - db_password
                - value
      networks:
        - port:
            get_resource: mysql_server_eth0

  mysql_server_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_resource: fixed_network
      security_groups:
        - get_resource: secgroup_common
        - get_resource: secgroup_db
      fixed_ips:
        - subnet_id:
            get_resource: fixed_subnet

  mysql_server_floating:
    type: "OS::Neutron::FloatingIP"
    depends_on:
      - extrouter_inside
    properties:
      floating_network_id:
        get_param: external_network_id
      port_id:
        get_resource: mysql_server_eth0

  ######################################################################
  #
  # Wordpress wait handle.  This wait handle ensures that Heat does not
  # report CREATE_COMPLETE until the Wordpress server is actually ready
  # for use.
  wordpress_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"

  wordpress_wait_condition:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on:
      - wordpress_server
    properties:
      Handle:
        get_resource: wordpress_wait_handle
      Timeout: "6000"

  ######################################################################
  #
  # wordpress server.  this sets up a server running Apache and
  # Wordpress.
  #
  wordpress_server:
    type: "OS::Nova::Server"
    depends_on: mysql_wait_condition
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh

            yum -y upgrade
            yum -y install httpd wordpress

            HTTPDCONF=/etc/httpd/conf.d/wordpress.conf
            sed -i '/Require local/ s/local/all granted/' $HTTPDCONF

            WPCONF=/etc/wordpress/wp-config.php
            sed -i '/DB_HOST/ s/localhost/$DB_HOST/' $WPCONF
            sed -i '/DB_NAME/ s/database_name_here/$DB_NAME/' $WPCONF
            sed -i '/DB_USER/ s/username_here/$DB_USER/' $WPCONF
            sed -i '/DB_PASSWORD/ s/password_here/$DB_PASSWORD/' $WPCONF
            sed -i 's/put your unique phrase here/$WP_AUTH_KEY/' $WPCONF

            setsebool -P httpd_can_network_connect_db=true

            systemctl enable httpd
            systemctl start httpd
            #
            # Signal heat that we are finished settings things up.
            cfn-signal -e0 --data 'OK' -r 'Setup complete' '$WAIT_HANDLE'
          params:
            "$WAIT_HANDLE":
              get_resource: wordpress_wait_handle
            "$DB_HOST":
              get_attr:
                - mysql_server_eth0
                - fixed_ips
                - 0
                - ip_address
            "$DB_NAME":
              get_param: db_name
            "$DB_USER":
              get_param: db_user
            "$DB_PASSWORD":
              get_attr:
                - db_password
                - value
            "$WP_AUTH_KEY":
              get_attr:
                - wp_auth_key
                - value
      networks:
        - port:
            get_resource: wordpress_server_eth0

  wordpress_server_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_resource: fixed_network
      security_groups:
        - get_resource: secgroup_common
        - get_resource: secgroup_webserver
      fixed_ips:
        - subnet_id:
            get_resource: fixed_subnet

  wordpress_server_floating:
    type: "OS::Neutron::FloatingIP"
    depends_on:
      - extrouter_inside
    properties:
      floating_network_id:
        get_param: external_network_id
      port_id:
        get_resource: wordpress_server_eth0

outputs:
  website_url:
    value:
      str_replace:
        template: "http://$HOST/wordpress"
        params:
          "$HOST":
            get_attr:
              - wordpress_server_floating
              - floating_ip_address

